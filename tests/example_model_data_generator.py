#!/usr/bin/env python3

import os
import h5py
import numpy as np
import random

"""

The data file generated by this call has inputs:

n: Number density
T: Temperature
F: Input coefficients

and outputs:

tau: Collision frequency
dG: Output coefficients

For testing purposes we are going to define the outputs as:

tau = T / n
dG(i,j,k) = i*n + j*T + k*F(i,j,k)

where we have random inputs sampled as

n: [2,4]
T: [8,12]
F(i,j,k): [-2,2]

"""

# This call runs a span (partition) of simulations
def generateData(num_samples, output_filename, num_moments, n_span, T_span, F_span, mass, kB):
    
    # Moment model without the 5 base moments
    num_total_coefficients = (num_moments+2) * (num_moments+1) * (num_moments) / 6
    num_coefficients = int(num_total_coefficients - 5)
    
    # ML inputs
    n   = np.zeros([num_samples])
    T   = np.zeros([num_samples])
    F   = np.zeros([num_samples,num_coefficients])
    
    # ML outputs
    tau = np.zeros([num_samples])
    G   = np.zeros([num_samples,num_coefficients])
    
    # The five moments we skip
    skip_moments = [(0,0,0),(1,0,0),(0,1,0),(0,0,1),(2,0,0)]
    
    # Iterate through samples and add them
    for sample in range(num_samples):
        
        n[sample] = random.uniform(n_span[0],n_span[1])
        T[sample] = random.uniform(T_span[0],T_span[1])
        
        tau[sample] = T[sample] / n[sample]
        
        idx = 0
        for i in range(num_moments):
            for j in range(num_moments-i):
                for k in range(num_moments-i-j):
                    
                    if (i,j,k) in skip_moments:
                        continue
                    
                    F[sample,idx] = random.uniform(F_span[0],F_span[1])
                    G[sample,idx] = i * n[sample] + j * T[sample] + k * F[sample,idx]
                    idx += 1
        
    # Write samples to h5 file
    file = h5py.File(output_filename+".h5", 'w')
    
    file.attrs["mass"] = mass
    file.attrs["kB"] = kB
    
    file.create_dataset('n',data=n)
    file.create_dataset('T',data=T)
    file.create_dataset('tau',data=tau)
    file.create_dataset('F',data=F)
    file.create_dataset('dG',data=G) # Note the name is dG not G
    
    file.close()

if __name__ == "__main__":
    
    num_moments = 4
    
    # Physics
    mass = 1.5
    kB = 0.8
    
    # Bounded by tau : [2,6]
    n_span = [2.,4.]
    T_span = [8.,12.]
    
    F_span = [-2.,2.]
    
    num_training_samples = 100000
    num_testing_samples = 1000
    
    output_filename = "example_model"
    
    generateData(num_training_samples, output_filename+"_training", num_moments, n_span, T_span, F_span, mass, kB)
    generateData(num_testing_samples, output_filename+"_testing", num_moments, n_span, T_span, F_span, mass, kB)
    
    
